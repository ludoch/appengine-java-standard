/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.appengine.tools.development.testing;

import com.google.common.collect.Lists;
import com.google.testing.util.TestUtil;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.List;
import junit.framework.TestCase;

/**
 * An integration test for the testing apis.  This test runs unit tests in a
 * classloader that only has access to the testing apis, their dependencies,
 * junit, junit's dependencies, and the unit tests themselves.  It then runs
 * the unit tests in this classloader.  The goal of this test is to verify that
 * the testing jar we package in the SDK is functioning correctly.
 *
 * @author maxr@google.com (Max Ross)
 */
public class TestingApiIntegrationTest extends TestCase {

  private static final File TEST_RESOURCES = new File(TestUtil.getSrcDir() +
      "/google3/javatests/com/google/apphosting/tests/usertests/test-resources");

  public void testTestingApiSdkPackaging() throws Throwable {
    List<URL> urls = Lists.newArrayList();
    for (File file : TEST_RESOURCES.listFiles()) {
      try {
        urls.add(file.toURI().toURL());
      } catch (MalformedURLException ex) {
        throw new RuntimeException(ex);
      }
    }
    // Create a classloader with only the jars in the test-resources fileset
    // available.  This simulates a userland project with unit tests that make
    // use of the testing apis.  We'll run the userland unit tests in this
    // classloader.
    URLClassLoader loader = new URLClassLoader(urls.toArray(new URL[urls.size()]), null);
    Class<?> testClass = 
        Class.forName("com.google.apphosting.tests.usertests.UserTests", true, loader);
    try {
      testClass.getDeclaredMethod("runTests").invoke(null);
    } catch (InvocationTargetException ite) {
      // Any exceptions thrown by the tests will show up here.
      throw ite.getTargetException();
    }
  }
}
